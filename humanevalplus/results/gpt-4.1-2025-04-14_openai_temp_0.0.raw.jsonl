{"task_id": "HumanEval/0", "solution": "```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i+1] - sorted_numbers[i]) < threshold:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/1", "solution": "```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    s = paren_string.replace(' ', '')\n    groups = []\n    balance = 0\n    start = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            if balance == 0:\n                start = i\n            balance += 1\n        elif c == ')':\n            balance -= 1\n            if balance == 0:\n                groups.append(s[start:i+1])\n    return groups\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(separate_paren_groups('( ) (( )) (( )( ))'))  # ['()', '(())', '(()())']\n    print(separate_paren_groups('()()'))                # ['()', '()']\n    print(separate_paren_groups('((()))(())'))          # ['((()))', '(())']\n    print(separate_paren_groups(' ( ( ) ) '))           # ['(())']\n```"}
{"task_id": "HumanEval/2", "solution": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(truncate_number(3.5))    # 0.5\n    print(truncate_number(7.123))  # 0.123\n    print(truncate_number(10.0))   # 0.0\n    print(truncate_number(0.999))  # 0.999\n```"}
{"task_id": "HumanEval/3", "solution": "```python\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    print(below_zero([1, 2, 3]))        # False\n    print(below_zero([1, 2, -4, 5]))    # True\n    print(below_zero([-1]))             # True\n    print(below_zero([0, 0, 0]))        # False\n    print(below_zero([5, -2, -3, 1]))   # False\n    print(below_zero([5, -2, -4, 1]))   # True\n```"}
{"task_id": "HumanEval/4", "solution": "```python\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list must not be empty.\")\n    mean = sum(numbers) / len(numbers)\n    abs_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(abs_deviations) / len(numbers)\n    return mad\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Output: 1.0\n    print(mean_absolute_deviation([1, 1, 1, 1]))          # Output: 0.0\n    print(mean_absolute_deviation([1, 2, 3]))             # Output: 0.666666...\n```"}
{"task_id": "HumanEval/5", "solution": "```python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(intersperse([], 4))           # []\n    print(intersperse([1, 2, 3], 4))    # [1, 4, 2, 4, 3]\n    print(intersperse([5], 0))          # [5]\n    print(intersperse([7, 8], 9))       # [7, 9, 8]\n```"}
{"task_id": "HumanEval/6", "solution": "```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_nesting(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.strip().split()\n    return [max_nesting(group) for group in groups]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]\n```\n"}
{"task_id": "HumanEval/7", "solution": "```python\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/8", "solution": "```python\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    print(sum_product([]))           # (0, 1)\n    print(sum_product([1, 2, 3, 4])) # (10, 24)\n    print(sum_product([5]))          # (5, 5)\n    print(sum_product([0, 2, 3]))    # (5, 0)\n```"}
{"task_id": "HumanEval/9", "solution": "```python\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # Output: [1, 2, 3, 3, 3, 4, 4]\n```"}
{"task_id": "HumanEval/10", "solution": "```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    n = len(string)\n    if n == 0:\n        return ''\n    # Find the longest palindromic suffix\n    for i in range(n):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            # Prefix to add is string[:i], reversed\n            return string + string[:i][::-1]\n    # If no palindromic suffix found (shouldn't happen), return full string + reversed string[:-1]\n    return string + string[:-1][::-1]\n\n\n# Test cases\nif __name__ == \"__main__\":\n    test_cases = [\n        ('', ''),\n        ('a', 'a'),\n        ('aa', 'aa'),\n        ('ab', 'aba'),\n        ('cat', 'catac'),\n        ('cata', 'catac'),\n        ('race', 'racecar'),\n        ('madam', 'madam'),\n        ('abcde', 'abcdeedcba'),\n    ]\n    for s, expected in test_cases:\n        result = make_palindrome(s)\n        print(f\"make_palindrome({s!r}) = {result!r} (expected: {expected!r})\")\n        assert result == expected\n```"}
{"task_id": "HumanEval/11", "solution": "```python\nfrom typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Use a list comprehension to XOR each pair of bits\n    return ''.join('0' if x == y else '1' for x, y in zip(a, b))\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(string_xor('010', '110'))  # Output: '100'\n```"}
{"task_id": "HumanEval/12", "solution": "```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)\n```\n"}
{"task_id": "HumanEval/13", "solution": "```python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\nif __name__ == \"__main__\":\n    # Example usage and simple tests\n    print(greatest_common_divisor(3, 5))    # Output: 1\n    print(greatest_common_divisor(25, 15))  # Output: 5\n    print(greatest_common_divisor(0, 10))   # Output: 10\n    print(greatest_common_divisor(-8, 12))  # Output: 4\n```"}
{"task_id": "HumanEval/14", "solution": "```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']\n```"}
{"task_id": "HumanEval/15", "solution": "```python\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(string_sequence(0))  # Output: '0'\n    print(string_sequence(5))  # Output: '0 1 2 3 4 5'\n    print(string_sequence(10)) # Output: '0 1 2 3 4 5 6 7 8 9 10'\n```"}
{"task_id": "HumanEval/16", "solution": "```python\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert string to lowercase to ignore case, then use set to get unique characters\n    return len(set(string.lower()))\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))  # Output: 3\n    print(count_distinct_characters('Jerry'))   # Output: 4\n    print(count_distinct_characters('Hello, World!'))  # Output: 10\n```\n"}
{"task_id": "HumanEval/17", "solution": "```python\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Mapping from note string to beats\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    # Split the input string by whitespace to get individual notes\n    notes = music_string.split()\n    # Map each note to its beat value\n    beats = []\n    for note in notes:\n        if note in note_to_beats:\n            beats.append(note_to_beats[note])\n        else:\n            raise ValueError(f\"Unknown note: {note}\")\n    return beats\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(parse_music('o o| .| o| o| .| .| .| .| o o'))\n```\n"}
{"task_id": "HumanEval/18", "solution": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring or len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(how_many_times('', 'a'))        # 0\n    print(how_many_times('aaa', 'a'))     # 3\n    print(how_many_times('aaaa', 'aa'))   # 3\n    print(how_many_times('abababa', 'aba')) # 3\n    print(how_many_times('abc', 'd'))     # 0\n```"}
{"task_id": "HumanEval/19", "solution": "```python\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    word_to_num = {word: i for i, word in enumerate(num_words)}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda w: word_to_num[w])\n    return ' '.join(sorted_words)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(sort_numbers('three one five'))  # Output: 'one three five'\n    print(sort_numbers('nine eight seven six'))  # Output: 'six seven eight nine'\n    print(sort_numbers('zero two one'))  # Output: 'zero one two'\n```\n"}
{"task_id": "HumanEval/20", "solution": "```python\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers.\")\n\n    # Sort the numbers to make finding closest pairs easier\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n\n    for i in range(len(sorted_numbers) - 1):\n        a, b = sorted_numbers[i], sorted_numbers[i+1]\n        diff = abs(a - b)\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (a, b)\n\n    return closest_pair\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    # Additional manual tests\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)\n    print(find_closest_elements([10.5, 10.1, 10.3, 9.9]))         # (10.1, 10.3)\n```"}
{"task_id": "HumanEval/21", "solution": "```python\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        # All numbers are the same; map all to 0.0\n        return [0.0 for _ in numbers]\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # [0.0, 0.25, 0.5, 0.75, 1.0]\n    print(rescale_to_unit([10, 20]))                   # [0.0, 1.0]\n    print(rescale_to_unit([5, 5, 5]))                  # [0.0, 0.0, 0.0]\n```"}
{"task_id": "HumanEval/22", "solution": "```python\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values if type(v) is int]\n\nif __name__ == \"__main__\":\n    # Example usages and simple tests\n    print(filter_integers(['a', 3.14, 5]))            # Output: [5]\n    print(filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]\n    print(filter_integers([True, False, 0, 1, 2]))    # Output: [0, 1, 2]\n```"}
{"task_id": "HumanEval/23", "solution": "```python\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    count = 0\n    for _ in string:\n        count += 1\n    return count\n\nif __name__ == \"__main__\":\n    # Simple tests\n    assert strlen('') == 0\n    assert strlen('abc') == 3\n    assert strlen('hello world') == 11\n    print(\"All tests passed.\")\n```"}
{"task_id": "HumanEval/24", "solution": "```python\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n    # The largest proper divisor of n is at most n//2\n    for d in range(n // 2, 0, -1):\n        if n % d == 0:\n            return d\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(largest_divisor(15))  # Output: 5\n    print(largest_divisor(100)) # Output: 50\n    print(largest_divisor(13))  # Output: 1\n```\n"}
{"task_id": "HumanEval/25", "solution": "```python\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Handle 2 separately to allow incrementing by 2 later (for odd numbers)\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Now check odd numbers from 3 upwards\n    p = 3\n    while p * p <= n:\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n        p += 2\n    # If n is now > 1, it is prime\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    print(factorize(8))   # [2, 2, 2]\n    print(factorize(25))  # [5, 5]\n    print(factorize(70))  # [2, 5, 7]\n```"}
{"task_id": "HumanEval/26", "solution": "```python\nfrom typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    counts = Counter(numbers)\n    return [x for x in numbers if counts[x] == 1]\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]\n    print(remove_duplicates([1, 1, 2, 3, 4, 4, 5]))  # Output: [2, 3, 5]\n    print(remove_duplicates([]))  # Output: []\n    print(remove_duplicates([7, 7, 7]))  # Output: []\n    print(remove_duplicates([10, 20, 30]))  # Output: [10, 20, 30]\n```"}
{"task_id": "HumanEval/27", "solution": "```python\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(flip_case('Hello'))  # Output: hELLO\n    print(flip_case('Python3.8'))  # Output: pYTHON3.8\n    print(flip_case('123abcDEF'))  # Output: 123ABCdef\n```"}
{"task_id": "HumanEval/28", "solution": "```python\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/29", "solution": "```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\nif __name__ == \"__main__\":\n    # Example usage and simple tests\n    print(filter_by_prefix([], 'a'))  # []\n    print(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))  # ['abc', 'array']\n    print(filter_by_prefix(['apple', 'banana', 'apricot', 'berry'], 'ap'))  # ['apple', 'apricot']\n```"}
{"task_id": "HumanEval/30", "solution": "```python\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(get_positive([-1, 2, -4, 5, 6]))  # [2, 5, 6]\n    print(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # [5, 3, 2, 3, 9, 123, 1]\n```"}
{"task_id": "HumanEval/31", "solution": "```python\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/32", "solution": "```python\nimport math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Use bisection method to find a root\n    # First, find an interval [a, b] where poly(a) and poly(b) have opposite signs\n    # Since the degree is odd (len(xs)-1 is odd), poly(x) goes to +inf and -inf at ends, so a root exists\n\n    def sign(x):\n        return 1 if x > 0 else -1 if x < 0 else 0\n\n    # Try to find a suitable interval\n    a, b = -1e3, 1e3\n    fa, fb = poly(xs, a), poly(xs, b)\n    # If not opposite, expand interval\n    while sign(fa) == sign(fb):\n        a *= 2\n        b *= 2\n        fa, fb = poly(xs, a), poly(xs, b)\n        # To avoid infinite loop, break after some iterations\n        if abs(a) > 1e12 or abs(b) > 1e12:\n            raise ValueError(\"Could not find sign change interval.\")\n\n    # Bisection method\n    for _ in range(100):\n        m = (a + b) / 2\n        fm = poly(xs, m)\n        if abs(fm) < 1e-10:\n            return m\n        if sign(fm) == sign(fa):\n            a, fa = m, fm\n        else:\n            b, fb = m, fm\n    return (a + b) / 2\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # 1.0\n```\n**Explanation:**\n- The script uses the bisection method to find a root of the polynomial.\n- It first finds an interval where the polynomial changes sign, then repeatedly bisects the interval to hone in on a root.\n- The function works for polynomials of odd degree (even number of coefficients), as guaranteed by the problem statement."}
{"task_id": "HumanEval/33", "solution": "```python\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Find indices divisible by 3\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    # Extract and sort the values at those indices\n    sorted_vals = sorted(l[i] for i in indices)\n    # Create a copy of the list to modify\n    res = l[:]\n    # Replace the values at those indices with the sorted values\n    for idx, val in zip(indices, sorted_vals):\n        res[idx] = val\n    return res\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    print(sort_third([1, 2, 3]))           # [1, 2, 3]\n    print(sort_third([5, 6, 3, 4, 8, 9, 2])) # [2, 6, 3, 4, 8, 9, 5]\n```"}
{"task_id": "HumanEval/34", "solution": "```python\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\nif __name__ == \"__main__\":\n    # Example usage and test\n    print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n```"}
{"task_id": "HumanEval/35", "solution": "```python\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        raise ValueError(\"max_element() arg is an empty list\")\n    max_val = l[0]\n    for item in l[1:]:\n        if item > max_val:\n            max_val = item\n    return max_val\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/36", "solution": "```python\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/37", "solution": "```python\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Get the values at even indices (0, 2, 4, ...)\n    even_values = [l[i] for i in range(0, len(l), 2)]\n    # Sort the even-indexed values\n    even_values.sort()\n    # Prepare result list\n    result = []\n    even_idx = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_values[even_idx])\n            even_idx += 1\n        else:\n            result.append(l[i])\n    return result\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(sort_even([1, 2, 3]))        # [1, 2, 3]\n    print(sort_even([5, 6, 3, 4]))     # [3, 6, 5, 4]\n    print(sort_even([9, 8, 7, 6, 5]))  # [5, 8, 7, 6, 9]\n    print(sort_even([]))               # []\n    print(sort_even([2]))              # [2]\n```"}
{"task_id": "HumanEval/38", "solution": "```python\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split into groups of 3 (last group may be shorter)\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # For each group of length 3, reverse the encoding: move last char to front\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)\n\n\n# Example usage and test\nif __name__ == \"__main__\":\n    original = \"abcdefghiXYZ\"\n    encoded = encode_cyclic(original)\n    decoded = decode_cyclic(encoded)\n    print(f\"Original: {original}\")\n    print(f\"Encoded : {encoded}\")\n    print(f\"Decoded : {decoded}\")\n    assert decoded == original\n```"}
{"task_id": "HumanEval/39", "solution": "```python\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        i = 3\n        while i * i <= x:\n            if x % i == 0:\n                return False\n            i += 2\n        return True\n\n    fib1, fib2 = 1, 2  # Start from 1, 2 (since 2 is the first prime Fibonacci)\n    count = 0\n    while True:\n        if is_prime(fib2):\n            count += 1\n            if count == n:\n                return fib2\n        fib1, fib2 = fib2, fib1 + fib2\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(prime_fib(1))  # 2\n    print(prime_fib(2))  # 3\n    print(prime_fib(3))  # 5\n    print(prime_fib(4))  # 13\n    print(prime_fib(5))  # 89\n```"}
{"task_id": "HumanEval/40", "solution": "```python\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    if n < 3:\n        return False\n    l_sorted = sorted(l)\n    for i in range(n-2):\n        # Avoid duplicate i\n        if i > 0 and l_sorted[i] == l_sorted[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            s = l_sorted[i] + l_sorted[left] + l_sorted[right]\n            if s == 0:\n                # Ensure all indices are distinct (which they are by construction)\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/41", "solution": "```python\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Each left-to-right car will \"collide\" with every right-to-left car.\n    # So, total collisions = n * n\n    return n * n\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(car_race_collision(3))  # Output: 9\n    print(car_race_collision(5))  # Output: 25\n```\n**Explanation:**  \nEach of the `n` left-to-right cars will \"collide\" with each of the `n` right-to-left cars, for a total of `n * n` collisions."}
{"task_id": "HumanEval/42", "solution": "```python\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\nif __name__ == \"__main__\":\n    # Example usage and doctest\n    print(incr_list([1, 2, 3]))\n    print(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n    \n    # Run doctests\n    import doctest\n    doctest.testmod()\n```\n"}
{"task_id": "HumanEval/43", "solution": "```python\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n```"}
{"task_id": "HumanEval/44", "solution": "```python\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(change_base(8, 3))  # '22'\n    print(change_base(8, 2))  # '1000'\n    print(change_base(7, 2))  # '111'\n```"}
{"task_id": "HumanEval/45", "solution": "```python\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\nif __name__ == \"__main__\":\n    # Example usage\n    print(triangle_area(5, 3))  # Output: 7.5\n\n    # Optional: run doctest\n    import doctest\n    doctest.testmod()\n```\n**Explanation:**  \nThe area of a triangle given a base `a` and height `h` is `(1/2) * base * height`. The function implements this formula and includes a doctest for verification. The script also demonstrates usage and can run the doctest when executed directly."}
{"task_id": "HumanEval/46", "solution": "```python\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Efficiently compute the n-th element of the fib4 number sequence (non-recursive).\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    # Initialize the first four values\n    vals = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_val = vals[0] + vals[1] + vals[2] + vals[3]\n        # Shift the window\n        vals = [vals[1], vals[2], vals[3], next_val]\n    return vals[3]\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(fib4(5))  # Output: 4\n    print(fib4(6))  # Output: 8\n    print(fib4(7))  # Output: 14\n    # Additional tests\n    print([fib4(i) for i in range(10)])  # Output: [0, 0, 2, 0, 2, 4, 8, 14, 28, 54]\n```"}
{"task_id": "HumanEval/47", "solution": "```python\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"median() arg is an empty list\")\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n    if n % 2 == 1:\n        return l_sorted[mid]\n    else:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    # Additional manual tests\n    print(median([3, 1, 2, 4, 5]))           # Output: 3\n    print(median([-10, 4, 6, 1000, 10, 20])) # Output: 15.0\n```"}
{"task_id": "HumanEval/48", "solution": "```python\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/49", "solution": "```python\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\nif __name__ == \"__main__\":\n    # Simple tests\n    assert modp(3, 5) == 3\n    assert modp(1101, 101) == 2\n    assert modp(0, 101) == 1\n    assert modp(3, 11) == 8\n    assert modp(100, 101) == 1\n    print(\"All tests passed.\")\n```"}
{"task_id": "HumanEval/50", "solution": "```python\ndef encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    Assumes input consists of lowercase English letters only.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    Assumes input consists of lowercase English letters only.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    original = \"hello\"\n    encoded = encode_shift(original)\n    decoded = decode_shift(encoded)\n    print(f\"Original: {original}\")\n    print(f\"Encoded : {encoded}\")\n    print(f\"Decoded : {decoded}\")\n```\n**Sample Output:**\n```\nOriginal: hello\nEncoded : mjqqt\nDecoded : hello\n```\n**Note:**  \n- This script assumes all input strings consist of lowercase English letters only (`a`-`z`).  \n- The encoding and decoding functions use modular arithmetic to wrap around the alphabet."}
{"task_id": "HumanEval/51", "solution": "```python\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    return ''.join(c for c in text if c not in vowels)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/52", "solution": "```python\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    print(below_threshold([1, 2, 4, 10], 100))  # True\n    print(below_threshold([1, 20, 4, 10], 5))   # False\n```"}
{"task_id": "HumanEval/53", "solution": "```python\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/54", "solution": "```python\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```\n**Explanation:**  \nThe function checks if the set of unique characters in `s0` is the same as in `s1`. This matches the examples: only the presence of characters matters, not their counts."}
{"task_id": "HumanEval/55", "solution": "```python\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/56", "solution": "```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    count = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n        elif ch == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    assert correct_bracketing(\"<\") == False\n    assert correct_bracketing(\"<>\") == True\n    assert correct_bracketing(\"<<><>>\") == True\n    assert correct_bracketing(\"><<>\") == False\n    print(\"All tests passed.\")\n```"}
{"task_id": "HumanEval/57", "solution": "```python\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True  # Empty or single-element lists are monotonic by definition\n\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    return increasing or decreasing\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    # Additional manual tests\n    print(monotonic([1, 2, 4, 20]))    # True\n    print(monotonic([1, 20, 4, 10]))   # False\n    print(monotonic([4, 1, 0, -10]))   # True\n    print(monotonic([1, 1, 1, 1]))     # True\n    print(monotonic([1]))              # True\n    print(monotonic([]))               # True\n```"}
{"task_id": "HumanEval/58", "solution": "```python\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n# Example usage and doctest\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    # Additional manual tests\n    print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\n    print(common([5, 3, 2, 8], [3, 2]))  # [2, 3]\n    print(common([], [1,2,3]))  # []\n    print(common([1,2,3], []))  # []\n    print(common([], []))  # []\n```"}
{"task_id": "HumanEval/59", "solution": "```python\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Remove all factors of 2\n    while n % 2 == 0:\n        last_factor = 2\n        n //= 2\n\n    # Now n is odd. Test odd factors from 3 upwards.\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            last_factor = factor\n            n //= factor\n        factor += 2\n\n    # If n > 1, then n itself is a prime factor\n    if n > 1:\n        last_factor = n\n\n    return last_factor\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(largest_prime_factor(13195))  # Output: 29\n    print(largest_prime_factor(2048))   # Output: 2\n    print(largest_prime_factor(100))    # Output: 5\n    print(largest_prime_factor(600851475143))  # Output: 6857\n```"}
{"task_id": "HumanEval/60", "solution": "```python\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```"}
{"task_id": "HumanEval/61", "solution": "```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        elif ch == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"(\", False),\n        (\"()\", True),\n        (\"(()())\", True),\n        (\")(()\", False),\n        (\"\", True),\n        (\"((())())\", True),\n        (\"(()\", False),\n        (\"())\", False),\n    ]\n    for s, expected in test_cases:\n        result = correct_bracketing(s)\n        print(f\"correct_bracketing({s!r}) == {result} (expected {expected})\")\n```\n"}
{"task_id": "HumanEval/62", "solution": "```python\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\n    print(derivative([1, 2, 3]))        # Output: [2, 6]\n    print(derivative([5]))              # Output: []\n    print(derivative([]))               # Output: []\n```"}
{"task_id": "HumanEval/63", "solution": "```python\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1  # fibfib(0), fibfib(1), fibfib(2)\n    for i in range(3, n+1):\n        nxt = a + b + c\n        a, b, c = b, c, nxt\n    return c\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(fibfib(1))  # 0\n    print(fibfib(5))  # 4\n    print(fibfib(8))  # 24\n```"}
{"task_id": "HumanEval/64", "solution": "```python\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    s = s.strip()\n    if not s:\n        return 0\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i, c in enumerate(s):\n        if c in vowels:\n            count += 1\n        elif c in 'yY' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Test cases\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"abcde\", 2),\n        (\"ACEDY\", 3),\n        (\"\", 0),\n        (\"y\", 1),\n        (\"Y\", 1),\n        (\"sky\", 1),\n        (\"SKY\", 1),\n        (\"syzygy\", 2),\n        (\"SYZYGY\", 2),\n        (\"rhythm\", 0),\n        (\"aeiou\", 5),\n        (\"AEIOU\", 5),\n        (\"bcd\", 0),\n        (\"try\", 1),\n        (\"trY\", 1),\n        (\"YELLOW\", 2),\n        (\"yellow\", 2),\n        (\"my\", 1),\n        (\"MY\", 1),\n        (\"myth\", 0),\n        (\"\", 0),\n    ]\n    for s, expected in test_cases:\n        result = vowels_count(s)\n        print(f\"vowels_count({s!r}) = {result} (expected {expected}) {'OK' if result == expected else 'FAIL'}\")\n```"}
{"task_id": "HumanEval/65", "solution": "```python\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    if shift == 0:\n        return s\n    return s[-shift:] + s[:-shift]\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # \"21\"\n    print(circular_shift(12, 2))  # \"12\"\n    print(circular_shift(12345, 2))  # \"45123\"\n    print(circular_shift(12345, 5))  # \"12345\"\n    print(circular_shift(12345, 6))  # \"54321\"\n    print(circular_shift(12345, 0))  # \"12345\"\n```"}
{"task_id": "HumanEval/66", "solution": "```python\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases\nif __name__ == \"__main__\":\n    print(digitSum(\"\"))           # 0\n    print(digitSum(\"abAB\"))       # 131 (65 + 66)\n    print(digitSum(\"abcCd\"))      # 67\n    print(digitSum(\"helloE\"))     # 69\n    print(digitSum(\"woArBld\"))    # 131 (65 + 66)\n    print(digitSum(\"aAaaaXa\"))    # 153 (65 + 88)\n```"}
{"task_id": "HumanEval/67", "solution": "```python\ndef fruit_distribution(s, n):\n    \"\"\"\n    Given a string s describing the number of apples and oranges in a basket,\n    and an integer n representing the total number of fruits in the basket,\n    return the number of mango fruits in the basket.\n\n    Examples:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 19\n    \"\"\"\n    # Split the string to extract numbers\n    parts = s.split()\n    # The number of apples is the first number in the string\n    apples = int(parts[0])\n    # The number of oranges is the number before the word \"oranges\"\n    oranges = int(parts[3])\n    # The number of mangoes is the total minus apples and oranges\n    mangoes = n - apples - oranges\n    return mangoes\n\n# Test cases\nif __name__ == \"__main__\":\n    print(fruit_distribution(\"5 apples and 6 oranges\", 19))    # Output: 8\n    print(fruit_distribution(\"0 apples and 1 oranges\", 3))     # Output: 2\n    print(fruit_distribution(\"2 apples and 3 oranges\", 100))   # Output: 95\n    print(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19\n```\n"}
{"task_id": "HumanEval/68", "solution": "```python\ndef pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    pluck the node with the smallest even value (and smallest index if tie).\n    Return [value, index] or [] if no even values or array is empty.\n    \"\"\"\n    min_even = None\n    min_index = -1\n\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = idx\n\n    if min_even is not None:\n        return [min_even, min_index]\n    else:\n        return []\n\n# Test cases\nif __name__ == \"__main__\":\n    print(pluck([4,2,3]))         # [2, 1]\n    print(pluck([1,2,3]))         # [2, 1]\n    print(pluck([]))              # []\n    print(pluck([5, 0, 3, 0, 4, 2])) # [0, 1]\n    print(pluck([1,3,5,7]))       # []\n    print(pluck([2,2,2,2]))       # [2, 0]\n    print(pluck([0]))             # [0, 0]\n```"}
{"task_id": "HumanEval/69", "solution": "```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    from collections import Counter\n\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num and num > 0]\n    return max(candidates) if candidates else -1\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(search([4, 1, 2, 2, 3, 1]))  # Output: 2\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\n    print(search([5, 5, 4, 4, 4]))  # Output: -1\n```"}
{"task_id": "HumanEval/70", "solution": "```python\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = 0, len(lst_sorted) - 1\n    pick_min = True\n    while left <= right:\n        if pick_min:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        pick_min = not pick_min\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    print(strange_sort_list([1, 2, 3, 4]))      # [1, 4, 2, 3]\n    print(strange_sort_list([5, 5, 5, 5]))      # [5, 5, 5, 5]\n    print(strange_sort_list([]))                # []\n    print(strange_sort_list([7, 1, 3, 9, 2]))   # [1, 9, 2, 7, 3]\n    print(strange_sort_list([10]))              # [10]\n```"}
{"task_id": "HumanEval/71", "solution": "```python\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check for triangle validity\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Heron's formula\n    s = (a + b + c) / 2\n    area_sq = s * (s - a) * (s - b) * (s - c)\n    if area_sq < 0:\n        return -1  # Should not happen if triangle is valid, but for safety\n\n    area = area_sq ** 0.5\n    return round(area, 2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(triangle_area(3, 4, 5))   # Output: 6.0\n    print(triangle_area(1, 2, 10))  # Output: -1\n    print(triangle_area(7, 8, 9))   # Output: 26.83\n```"}
{"task_id": "HumanEval/72", "solution": "```python\ndef will_it_fly(q, w):\n    '''\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (palindromic list) and the sum of its elements is <= w.\n    '''\n    # Check if q is a palindrome (balanced)\n    is_balanced = q == q[::-1]\n    # Check if sum of elements is <= w\n    is_light_enough = sum(q) <= w\n    # Return True only if both conditions are met\n    return is_balanced and is_light_enough\n\n# Test cases\nprint(will_it_fly([1, 2], 5))      # False\nprint(will_it_fly([3, 2, 3], 1))   # False\nprint(will_it_fly([3, 2, 3], 9))   # True\nprint(will_it_fly([3], 5))         # True\nprint(will_it_fly([], 0))          # True (empty list is palindromic and sum is 0)\n```"}
{"task_id": "HumanEval/73", "solution": "```python\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count\n\n# Test cases\nif __name__ == \"__main__\":\n    print(smallest_change([1,2,3,5,4,7,9,6]))      # Output: 4\n    print(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\n    print(smallest_change([1, 2, 3, 2, 1]))        # Output: 0\n    print(smallest_change([1, 2, 2, 1]))           # Output: 0\n    print(smallest_change([1, 2, 3, 4]))           # Output: 2\n```"}
{"task_id": "HumanEval/74", "solution": "```python\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum2 < sum1:\n        return lst2\n    else:\n        return lst1\n\n# Test cases\nif __name__ == \"__main__\":\n    print(total_match([], []))  # []\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))  # ['hI', 'Hi']\n    print(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # ['hi', 'admin']\n    print(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # ['hI', 'hi', 'hi']\n    print(total_match(['4'], ['1', '2', '3', '4', '5']))  # ['4']\n```"}
{"task_id": "HumanEval/75", "solution": "```python\ndef is_multiply_prime(a):\n    \"\"\"Returns True if a is the product of 3 (not necessarily distinct) primes, False otherwise.\n    a < 100\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Generate all primes less than 100\n    primes = [i for i in range(2, 100) if is_prime(i)]\n\n    # Try all combinations of 3 primes (with replacement)\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Example usage:\n# print(is_multiply_prime(30))  # True, since 2*3*5=30\n# print(is_multiply_prime(60))  # True, since 2*2*3*5=60, but only 3 primes allowed, so False\n# print(is_multiply_prime(27))  # True, since 3*3*3=27\n# print(is_multiply_prime(20))  # False\n```\n**Explanation:**\n- The function checks all possible products of three primes (with replacement, so repeated primes are allowed, e.g., 2\u00d72\u00d75).\n- Returns `True` if any such product equals `a`, otherwise `False`.\n- Works for all `a < 100`."}
{"task_id": "HumanEval/76", "solution": "```python\ndef is_simple_power(x, n):\n    \"\"\"Returns True if x is a simple power of n, i.e., x == n**k for some integer k >= 0.\"\"\"\n    if x < 1 or n < 1:\n        return False\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False\n```"}
{"task_id": "HumanEval/77", "solution": "```python\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    # For positive and negative numbers\n    # Compute the integer cube root, taking care of negatives\n    if a > 0:\n        root = round(a ** (1/3))\n    else:\n        root = -round(abs(a) ** (1/3))\n    return root ** 3 == a\n\n# Test cases\nif __name__ == \"__main__\":\n    test_cases = [1, 2, -1, 64, 0, 180, -27, 27, 125, -125]\n    for n in test_cases:\n        print(f\"iscube({n}) = {iscube(n)}\")\n```\n"}
{"task_id": "HumanEval/78", "solution": "```python\ndef hex_key(num):\n    \"\"\"Counts the number of prime hexadecimal digits in the input string.\"\"\"\n    # Set of hexadecimal digits that are primes: 2, 3, 5, 7, B (11), D (13)\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count how many characters in num are in the set of prime hex digits\n    return sum(1 for c in num if c in prime_hex_digits)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))            # Output: 1\n    print(hex_key(\"1077E\"))         # Output: 2\n    print(hex_key(\"ABED1A33\"))      # Output: 4\n    print(hex_key(\"123456789ABCDEF0\")) # Output: 6\n    print(hex_key(\"2020\"))          # Output: 2\n    print(hex_key(\"\"))              # Output: 0\n```"}
{"task_id": "HumanEval/79", "solution": "```python\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert the decimal number to binary (without '0b' prefix)\n    binary_str = bin(decimal)[2:]\n    # Add 'db' at the start and end\n    return f\"db{binary_str}db\"\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(decimal_to_binary(15))  # Output: db1111db\n    print(decimal_to_binary(32))  # Output: db100000db\n    print(decimal_to_binary(0))   # Output: db0db\n```"}
{"task_id": "HumanEval/80", "solution": "```python\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        window = s[i:i+3]\n        if len(set(window)) != 3:\n            return False\n    return True\n\n# Test cases\nif __name__ == \"__main__\":\n    print(is_happy(\"a\"))      # False\n    print(is_happy(\"aa\"))     # False\n    print(is_happy(\"abcd\"))   # True\n    print(is_happy(\"aabb\"))   # False\n    print(is_happy(\"adb\"))    # True\n    print(is_happy(\"xyy\"))    # False\n    print(is_happy(\"abcabc\")) # True\n    print(is_happy(\"abca\"))   # True\n    print(is_happy(\"aab\"))    # False\n```"}
{"task_id": "HumanEval/81", "solution": "```python\ndef numerical_letter_grade(grades):\n    \"\"\"Converts a list of GPAs to their corresponding letter grades.\"\"\"\n    # List of (threshold, letter) in descending order\n    thresholds = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n            continue\n        for i in range(len(thresholds)-1):\n            lower, letter = thresholds[i+1]\n            upper, _ = thresholds[i]\n            if gpa > lower and gpa <= upper:\n                result.append(letter)\n                break\n        else:\n            # If GPA is exactly 0.0\n            if gpa == 0.0:\n                result.append('E')\n            # If GPA is less than 0.0 (invalid), assign 'E' as well\n            elif gpa < 0.0:\n                result.append('E')\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # ['A+', 'B', 'C-', 'C', 'A-']\n```\n"}
{"task_id": "HumanEval/82", "solution": "```python\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test cases\nif __name__ == \"__main__\":\n    print(prime_length('Hello'))     # True (length 5)\n    print(prime_length('abcdcba'))   # True (length 7)\n    print(prime_length('kittens'))   # True (length 7)\n    print(prime_length('orange'))    # False (length 6)\n    print(prime_length('a'))         # False (length 1)\n    print(prime_length('ab'))        # True (length 2)\n    print(prime_length('abc'))       # True (length 3)\n    print(prime_length('abcd'))      # False (length 4)\n```"}
{"task_id": "HumanEval/83", "solution": "```python\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        # 1-digit numbers: 1,2,...,9. Only '1' starts or ends with 1.\n        return 1\n    else:\n        # Total n-digit numbers: 9 * 10**(n-1)\n        # Numbers starting with 1: 10**(n-1)\n        # Numbers ending with 1: 9 * 10**(n-2)\n        # Numbers both starting and ending with 1: 10**(n-2)\n        return 10**(n-1) + 9 * 10**(n-2) - 10**(n-2)\n\n# Example usage:\nif __name__ == \"__main__\":\n    for n in range(1, 6):\n        print(f\"n={n}: {starts_one_ends(n)}\")\n```\n**Explanation:**\n- For `n=1`, only the number 1 qualifies.\n- For `n>=2`:\n    - Numbers starting with 1: `10**(n-1)` (e.g., 1xxxx...x)\n    - Numbers ending with 1: `9*10**(n-2)` (first digit 1-9, last digit 1, middle digits any)\n    - Numbers both starting and ending with 1: `10**(n-2)` (first and last digit 1, middle digits any)\n    - Use inclusion-exclusion: start + end - both"}
{"task_id": "HumanEval/84", "solution": "```python\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Convert N to string, iterate over each character, convert to int, and sum\n    digit_sum = sum(int(d) for d in str(N))\n    # Convert the sum to binary and remove the '0b' prefix\n    return bin(digit_sum)[2:]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(solve(1000))  # Output: \"1\"\n    print(solve(150))   # Output: \"110\"\n    print(solve(147))   # Output: \"1100\"\n    print(solve(0))     # Output: \"0\"\n```\n"}
{"task_id": "HumanEval/85", "solution": "```python\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)\n\n# Example usage:\n# print(add([4, 2, 6, 7]))  # Output: 2\n```\n**Explanation:**\n- `enumerate(lst)` gives both index `i` and value `x`.\n- `i % 2 == 1` checks for odd indices.\n- `x % 2 == 0` checks for even elements.\n- The sum is taken over all such elements."}
{"task_id": "HumanEval/86", "solution": "```python\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    import re\n\n    # Split the string into words and spaces, preserving spaces\n    tokens = re.findall(r'\\S+|\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            # Preserve spaces as is\n            result.append(token)\n        else:\n            # Sort the characters in the word by ASCII value\n            sorted_token = ''.join(sorted(token))\n            result.append(sorted_token)\n    return ''.join(result)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(anti_shuffle('Hi'))                # 'Hi'\n    print(anti_shuffle('hello'))             # 'ehllo'\n    print(anti_shuffle('Hello World!!!'))    # 'Hello !!!Wdlor'\n    print(anti_shuffle('  ab c  d '))        # '  ab c  d '\n```\n**Explanation:**\n- The function uses a regular expression to split the input into words and spaces, preserving the order and number of spaces.\n- Each word (non-space token) is sorted by ASCII value.\n- Spaces are left unchanged.\n- The result is joined and returned."}
{"task_id": "HumanEval/87", "solution": "```python\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for row_idx, row in enumerate(lst):\n        # Find all columns in this row where value == x\n        cols = [col_idx for col_idx, val in enumerate(row) if val == x]\n        # Sort columns in descending order\n        cols.sort(reverse=True)\n        # Add (row, col) for each found column\n        for col_idx in cols:\n            result.append((row_idx, col_idx))\n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    print(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))  # [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n    print(get_row([], 1))  # []\n\n    print(get_row([[], [1], [1, 2, 3]], 3))  # [(2, 2)]\n```"}
{"task_id": "HumanEval/88", "solution": "```python\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        # Odd sum: ascending\n        return sorted(array)\n    else:\n        # Even sum: descending\n        return sorted(array, reverse=True)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(sort_array([]))                    # []\n    print(sort_array([5]))                   # [5]\n    print(sort_array([2, 4, 3, 0, 1, 5]))    # [0, 1, 2, 3, 4, 5]\n    print(sort_array([2, 4, 3, 0, 1, 5, 6])) # [6, 5, 4, 3, 2, 1, 0]\n    print(sort_array([1, 2, 3, 4]))          # [4, 3, 2, 1] (1+4=5, odd -> ascending)\n    print(sort_array([2, 2, 2, 2]))          # [2, 2, 2, 2] (2+2=4, even -> descending)\n```"}
{"task_id": "HumanEval/89", "solution": "```python\ndef encrypt(s):\n    \"\"\"Encrypts the string by shifting each lowercase letter forward by 4 positions in the alphabet.\"\"\"\n    result = []\n    shift = 2 * 2  # 4\n    for c in s:\n        if 'a' <= c <= 'z':\n            # Shift character and wrap around using modulo\n            new_c = chr((ord(c) - ord('a') + shift) % 26 + ord('a'))\n            result.append(new_c)\n        else:\n            # Non-lowercase letters are left unchanged\n            result.append(c)\n    return ''.join(result)\n\n# Test cases\nprint(encrypt('hi'))        # 'lm'\nprint(encrypt('asdfghjkl')) # 'ewhjklnop'\nprint(encrypt('gf'))        # 'kj'\nprint(encrypt('et'))        # 'ix'\n```\n"}
{"task_id": "HumanEval/90", "solution": "```python\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]\n\n# Test cases\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))  # 2\n    print(next_smallest([5, 1, 4, 3, 2]))  # 2\n    print(next_smallest([]))               # None\n    print(next_smallest([1, 1]))           # None\n    print(next_smallest([2, 2, 3, 1]))     # 2\n    print(next_smallest([7]))              # None\n    print(next_smallest([3, 3, 3, 3]))     # None\n```"}
{"task_id": "HumanEval/91", "solution": "```python\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n\n    # Split the string into sentences using regex to match '.', '?', or '!' as delimiters\n    # The regex splits on the delimiter and any following whitespace\n    sentences = re.split(r'[.?!]\\s*', S)\n    count = 0\n    for sentence in sentences:\n        # Strip leading/trailing whitespace\n        sentence = sentence.strip()\n        # Check if the sentence starts with 'I' as a whole word\n        if sentence.startswith('I '):\n            count += 1\n        # Also check if the sentence is exactly 'I'\n        elif sentence == 'I':\n            count += 1\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(is_bored(\"Hello world\"))  # 0\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # 1\n    print(is_bored(\"I am here. I am bored! Are you? I think so.\"))  # 3\n    print(is_bored(\"No boredom here!\"))  # 0\n    print(is_bored(\"I. I! I? I am.\"))  # 4\n```"}
{"task_id": "HumanEval/92", "solution": "```python\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    # Check if all inputs are integers (not floats, not bools)\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    # Check if any one number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))      # True\nprint(any_int(3, 2, 2))      # False\nprint(any_int(3, -2, 1))     # True\nprint(any_int(3.6, -2.2, 2)) # False\nprint(any_int(True, 2, 3))   # False (since True is a bool, not an int)\nprint(any_int(0, 0, 0))      # True (0 == 0 + 0)\n```"}
{"task_id": "HumanEval/93", "solution": "```python\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Mapping for vowels to their +2 letter\n    vowel_map = {\n        'a': 'c', 'A': 'C',\n        'e': 'g', 'E': 'G',\n        'i': 'k', 'I': 'K',\n        'o': 'q', 'O': 'Q',\n        'u': 'w', 'U': 'W'\n    }\n    result = []\n    for ch in message:\n        if ch in vowel_map:\n            # Replace vowel, then swap case\n            new_ch = vowel_map[ch]\n            new_ch = new_ch.swapcase()\n            result.append(new_ch)\n        elif ch.isalpha():\n            # Not a vowel, just swap case\n            result.append(ch.swapcase())\n        else:\n            # Not a letter (shouldn't happen per problem statement)\n            result.append(ch)\n    return ''.join(result)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(encode('test'))           # 'TGST'\n    print(encode('This is a message'))  # 'tHKS KS C MGSSCGG'\n```\n"}
{"task_id": "HumanEval/94", "solution": "```python\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0  # If no primes, return 0 (not specified, but safe)\n    largest_prime = max(primes)\n    return sum(int(d) for d in str(largest_prime))\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # 10\n    print(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # 25\n    print(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # 13\n    print(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # 11\n    print(skjkasdkd([0,81,12,3,1,21]))  # 3\n    print(skjkasdkd([0,8,1,2,1,7]))  # 7\n```"}
{"task_id": "HumanEval/95", "solution": "```python\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    keys = list(dict.keys())\n\n    # All keys must be strings\n    if not all(isinstance(k, str) for k in keys):\n        return False\n\n    all_lower = all(k.islower() for k in keys)\n    all_upper = all(k.isupper() for k in keys)\n\n    return all_lower or all_upper\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))                # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))     # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))             # True\nprint(check_dict_case({}))                                         # False\n```"}
{"task_id": "HumanEval/96", "solution": "```python\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x ** 0.5) + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(count_up_to(5))   # [2, 3]\n    print(count_up_to(11))  # [2, 3, 5, 7]\n    print(count_up_to(0))   # []\n    print(count_up_to(20))  # [2, 3, 5, 7, 11, 13, 17, 19]\n    print(count_up_to(1))   # []\n    print(count_up_to(18))  # [2, 3, 5, 7, 11, 13, 17]\n```"}
{"task_id": "HumanEval/97", "solution": "```python\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b\n\n# Test cases\nprint(multiply(148, 412))    # 16\nprint(multiply(19, 28))      # 72\nprint(multiply(2020, 1851))  # 0\nprint(multiply(14, -15))     # 20\n```"}
{"task_id": "HumanEval/98", "solution": "```python\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(count_upper('aBCdEf'))   # Output: 1\n    print(count_upper('abcdefg'))  # Output: 0\n    print(count_upper('dBBE'))     # Output: 0\n```"}
{"task_id": "HumanEval/99", "solution": "```python\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    '''\n    num = float(value)\n    int_part = int(num)\n    frac = abs(num - int_part)\n    if frac == 0.5:\n        # Equidistant: round away from zero\n        return int_part + (1 if num > 0 else -1)\n    else:\n        # Standard rounding\n        return int(num + 0.5) if num > 0 else int(num - 0.5)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(closest_integer(\"10\"))     # 10\n    print(closest_integer(\"15.3\"))   # 15\n    print(closest_integer(\"14.5\"))   # 15\n    print(closest_integer(\"-14.5\"))  # -15\n    print(closest_integer(\"-15.3\"))  # -15\n    print(closest_integer(\"0.5\"))    # 1\n    print(closest_integer(\"-0.5\"))   # -1\n    print(closest_integer(\"0.49\"))   # 0\n    print(closest_integer(\"-0.49\"))  # 0\n```"}
{"task_id": "HumanEval/100", "solution": "```python\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    pile = []\n    if n % 2 == 1:\n        # n is odd, so start from n and add 2 each time (odd numbers)\n        for i in range(n):\n            pile.append(n + 2 * i)\n    else:\n        # n is even, so start from n and add 2 each time (even numbers)\n        for i in range(n):\n            pile.append(n + 2 * i)\n    return pile\n\n# Test cases\nif __name__ == \"__main__\":\n    print(make_a_pile(3))  # [3, 5, 7]\n    print(make_a_pile(4))  # [4, 6, 8, 10]\n    print(make_a_pile(1))  # [1]\n    print(make_a_pile(5))  # [5, 7, 9, 11, 13]\n```\n"}
{"task_id": "HumanEval/101", "solution": "```python\nimport re\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split on one or more spaces or commas\n    return [word for word in re.split(r'[,\\s]+', s.strip()) if word]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    print(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    print(words_string(\"  Hello,world , test  ,case \"))  # [\"Hello\", \"world\", \"test\", \"case\"]\n```"}
{"task_id": "HumanEval/102", "solution": "```python\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    # Ensure x <= y, otherwise no valid range\n    if x > y:\n        return -1\n    # Start from y, find the largest even number <= y\n    if y % 2 == 0:\n        largest_even = y\n    else:\n        largest_even = y - 1\n    # Check if largest_even is within the range [x, y]\n    if largest_even >= x:\n        return largest_even\n    else:\n        return -1\n\n# Example usage:\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1\nprint(choose_num(8, 8))    # Output: 8\nprint(choose_num(9, 9))    # Output: -1\n```"}
{"task_id": "HumanEval/103", "solution": "```python\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    count = m - n + 1\n    total = (n + m) * count // 2  # sum of arithmetic progression\n    avg = total / count\n    rounded = int(avg + 0.5) if avg - int(avg) >= 0.5 else int(avg)\n    return bin(rounded)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))    # \"0b11\"\n    print(rounded_avg(7, 5))    # -1\n    print(rounded_avg(10, 20))  # \"0b1111\"\n    print(rounded_avg(20, 33))  # \"0b11010\"\n```\n"}
{"task_id": "HumanEval/104", "solution": "```python\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n    return sorted([num for num in x if not has_even_digit(num)])\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\n    print(unique_digits([152, 323, 1422, 10]))  # []\n```"}
{"task_id": "HumanEval/105", "solution": "```python\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    digit_names = [\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    ]\n    # Filter only numbers between 1 and 9 inclusive\n    filtered = [x for x in arr if 1 <= x <= 9]\n    # Sort and reverse\n    filtered_sorted = sorted(filtered)[::-1]\n    # Map to names\n    result = [digit_names[x-1] for x in filtered_sorted]\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n    print(by_length([]))                        # []\n    print(by_length([1, -1, 55]))               # ['One']\n    print(by_length([9, 7, 5, 3, 1]))           # ['Nine', 'Seven', 'Five', 'Three', 'One']\n    print(by_length([10, 0, 8, 2]))             # ['Eight', 'Two']\n```"}
{"task_id": "HumanEval/106", "solution": "```python\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(x):\n        result = 1\n        for j in range(1, x+1):\n            result *= j\n        return result\n\n    def sum_to(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(f(5))  # Output: [1, 2, 6, 24, 15]\n```"}
{"task_id": "HumanEval/107", "solution": "```python\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Returns:\n        (even_count, odd_count)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        s = str(i)\n        if s == s[::-1]:  # Check if palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(3))   # Output: (1, 2)\n    print(even_odd_palindrome(12))  # Output: (4, 6)\n```\n"}
{"task_id": "HumanEval/108", "solution": "```python\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def signed_digit_sum(n):\n        s = str(n)\n        if s[0] == '-':\n            # First digit is negative\n            digits = [int('-' + s[1])]\n            digits += [int(ch) for ch in s[2:]]\n        else:\n            digits = [int(ch) for ch in s]\n        return sum(digits)\n    \n    return sum(1 for x in arr if signed_digit_sum(x) > 0)\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3\n    assert count_nums([-123, 123, 0, -5, 50]) == 2  # -123: -1+2+3=-1+5=4>0, 123:1+2+3=6>0, 0:0, -5:-5, 50:5+0=5>0\n    print(\"All tests passed.\")\n```\n"}
{"task_id": "HumanEval/109", "solution": "```python\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return True\n    # Count the number of \"drops\" (where arr[i] > arr[i+1])\n    drops = 0\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            drops += 1\n    # If there is at most one drop, it can be rotated to be sorted\n    return drops <= 1\n\n# Example test cases\nif __name__ == \"__main__\":\n    print(move_one_ball([3, 4, 5, 1, 2]))  # True\n    print(move_one_ball([3, 5, 4, 1, 2]))  # False\n    print(move_one_ball([1, 2, 3, 4, 5]))  # True\n    print(move_one_ball([2, 3, 4, 5, 1]))  # True\n    print(move_one_ball([1]))              # True\n    print(move_one_ball([]))               # True\n    print(move_one_ball([2, 1, 3]))        # False\n```"}
{"task_id": "HumanEval/110", "solution": "```python\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Count the number of even numbers in both lists\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    total_even = len(even_lst1) + len(even_lst2)\n    # To make lst1 all even, we need at least len(lst1) even numbers in total\n    if total_even >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example usage:\n# print(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\n# print(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\"\n```\n"}
{"task_id": "HumanEval/111", "solution": "```python\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    if not test.strip():\n        return {}\n    from collections import Counter\n    letters = test.split()\n    counts = Counter(letters)\n    if not counts:\n        return {}\n    max_count = max(counts.values())\n    return {k: v for k, v in counts.items() if v == max_count}\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(histogram('a b c'))        # {'a': 1, 'b': 1, 'c': 1}\n    print(histogram('a b b a'))      # {'a': 2, 'b': 2}\n    print(histogram('a b c a b'))    # {'a': 2, 'b': 2}\n    print(histogram('b b b b a'))    # {'b': 4}\n    print(histogram(''))             # {}\n```"}
{"task_id": "HumanEval/112", "solution": "```python\ndef reverse_delete(s, c):\n    \"\"\"\n    Deletes all characters from s that are present in c,\n    then checks if the resulting string is a palindrome.\n    Returns a tuple: (result_string, is_palindrome)\n    \"\"\"\n    # Create a set of characters to delete for O(1) lookup\n    delete_set = set(c)\n    # Build the result string by including only chars not in delete_set\n    result = ''.join(char for char in s if char not in delete_set)\n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(reverse_delete(\"abcde\", \"ae\"))        # ('bcd', False)\n    print(reverse_delete(\"abcdef\", \"b\"))        # ('acdef', False)\n    print(reverse_delete(\"abcdedcba\", \"ab\"))    # ('cdedc', True)\n    print(reverse_delete(\"racecar\", \"\"))        # ('racecar', True)\n    print(reverse_delete(\"\", \"abc\"))            # ('', True)\n```"}
{"task_id": "HumanEval/113", "solution": "```python\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 == 1)\n        template = \"the number of odd elements in the string i of the input.\"\n        # Replace all 'i' with the string version of odd_count\n        # But only replace 'i' as a character, not as part of another word\n        # In the template, 'i' only appears as a single character, so str.replace is safe\n        out = template.replace('i', str(odd_count))\n        result.append(out)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(odd_count(['1234567']))\n    print(odd_count(['3',\"11111111\"]))\n```\n**How it works:**\n- For each string in the input list, it counts the number of odd digits.\n- It then replaces every `'i'` in the template string with that count (as a string).\n- Returns the list of formatted strings.\n\n**Test output:**\n```python\n['the number of odd elements 4n the str4ng 4 of the 4nput.']\n['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.']\n```"}
{"task_id": "HumanEval/114", "solution": "```python\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input array must be non-empty\")\n    min_ending_here = min_so_far = nums[0]\n    for num in nums[1:]:\n        min_ending_here = min(num, min_ending_here + num)\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\n    print(minSubArraySum([-1, -2, -3]))        # Output: -6\n    print(minSubArraySum([5, -1, 2, -7, 3]))   # Output: -7\n    print(minSubArraySum([1]))                 # Output: 1\n```"}
{"task_id": "HumanEval/115", "solution": "```python\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    For each well (row), count the number of water units (1s).\n    For each well, the number of bucket lowers needed is ceil(water_units / capacity).\n    Sum over all wells.\n    \"\"\"\n    total_lowers = 0\n    for row in grid:\n        water_units = sum(row)\n        lowers = math.ceil(water_units / capacity) if water_units > 0 else 0\n        total_lowers += lowers\n    return total_lowers\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example 1\n    grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    capacity1 = 1\n    print(max_fill(grid1, capacity1))  # Output: 6\n\n    # Example 2\n    grid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    capacity2 = 2\n    print(max_fill(grid2, capacity2))  # Output: 5\n\n    # Example 3\n    grid3 = [[0,0,0], [0,0,0]]\n    capacity3 = 5\n    print(max_fill(grid3, capacity3))  # Output: 0\n```\n**Explanation:**  \n- For each well (row), count the number of water units (`sum(row)`).\n- For each well, the number of bucket lowers is `ceil(water_units / capacity)`.\n- Sum this over all wells.  \n- If a well has no water, it needs 0 lowers."}
{"task_id": "HumanEval/116", "solution": "```python\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    def ones_count(n):\n        # For negative numbers, get two's complement 32-bit representation\n        if n < 0:\n            n = n & 0xFFFFFFFF\n        return bin(n).count('1')\n    return sorted(arr, key=lambda x: (ones_count(x), x))\n\n# Test cases\nif __name__ == \"__main__\":\n    print(sort_array([1, 5, 2, 3, 4]))      # [1, 2, 3, 4, 5]\n    print(sort_array([-2, -3, -4, -5, -6])) # [-6, -5, -4, -3, -2]\n    print(sort_array([1, 0, 2, 3, 4]))      # [0, 1, 2, 3, 4]\n    print(sort_array([7, 8, 3, 5, 6]))      # [8, 3, 5, 6, 7]\n    print(sort_array([0, 0, 0]))            # [0, 0, 0]\n```"}
{"task_id": "HumanEval/117", "solution": "```python\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, return a list of all words from s\n    that contain exactly n consonants, in order these words appear in s.\"\"\"\n    if not s:\n        return []\n    vowels = set('aeiouAEIOU')\n    result = []\n    for word in s.split():\n        consonant_count = sum(1 for c in word if c.isalpha() and c not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\n    print(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\n    print(select_words(\"simple white space\", 2))      # []\n    print(select_words(\"Hello world\", 4))             # [\"world\"]\n    print(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]\n```"}
{"task_id": "HumanEval/118", "solution": "```python\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    n = len(word)\n    # Only consider vowels that are not at the beginning or end\n    for i in range(n-2, 0, -1):  # from n-2 down to 1 (right to left, skipping ends)\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"\n\n# Example usage:\n# print(get_closest_vowel(\"yogurt\"))  # \"u\"\n# print(get_closest_vowel(\"FULL\"))    # \"U\"\n# print(get_closest_vowel(\"quick\"))   # \"\"\n# print(get_closest_vowel(\"ab\"))      # \"\"\n```\n"}
{"task_id": "HumanEval/119", "solution": "```python\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_good(s):\n        bal = 0\n        for c in s:\n            if c == '(':\n                bal += 1\n            else:\n                bal -= 1\n            if bal < 0:\n                return False\n        return bal == 0\n\n    s1, s2 = lst\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Example usage:\n# print(match_parens(['()(', ')']))  # Output: 'Yes'\n# print(match_parens([')', ')']))    # Output: 'No'\n```"}
{"task_id": "HumanEval/120", "solution": "```python\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    if k == 0:\n        return []\n    # Sort arr in descending order, take first k elements, then sort them ascendingly\n    return sorted(sorted(arr, reverse=True)[:k])\n\n# Test cases\nif __name__ == \"__main__\":\n    print(maximum([-3, -4, 5], 3))         # Output: [-4, -3, 5]\n    print(maximum([4, -4, 4], 2))          # Output: [4, 4]\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]\n    print(maximum([1, 2, 3, 4, 5], 0))     # Output: []\n    print(maximum([1], 1))                 # Output: [1]\n    print(maximum([0, 0, 0], 2))           # Output: [0, 0]\n```"}
{"task_id": "HumanEval/121", "solution": "```python\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    # Even positions: index 0, 2, 4, ...\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(solution([5, 8, 7, 1]))        # Output: 12\n    print(solution([3, 3, 3, 3, 3]))    # Output: 9\n    print(solution([30, 13, 24, 321]))  # Output: 0\n```"}
{"task_id": "HumanEval/122", "solution": "```python\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x for x in arr[:k] if -99 <= x <= 99)\n\n# Example usage:\nif __name__ == \"__main__\":\n    arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    k = 4\n    print(add_elements(arr, k))  # Output: 24\n\n    # Additional test cases\n    print(add_elements([10, 20, 30, 100, 200], 3))  # Output: 60\n    print(add_elements([99, -99, 100, -100], 4))    # Output: 0\n    print(add_elements([1], 1))                     # Output: 1\n    print(add_elements([123, 45, 67, 89], 4))       # Output: 201\n```"}
{"task_id": "HumanEval/123", "solution": "```python\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    odds = set()\n    current = n\n    while True:\n        if current % 2 == 1:\n            odds.add(current)\n        if current == 1:\n            break\n        if current % 2 == 0:\n            current //= 2\n        else:\n            current = 3 * current + 1\n    return sorted(odds)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(get_odd_collatz(5))  # Output: [1, 5]\n    print(get_odd_collatz(13)) # Output: [1, 5, 13]\n    print(get_odd_collatz(1))  # Output: [1]\n    print(get_odd_collatz(6))  # Output: [1, 3, 5]\n```"}
{"task_id": "HumanEval/124", "solution": "```python\ndef valid_date(date):\n    \"\"\"Validates a date string in the format mm-dd-yyyy.\"\"\"\n    if not date or not isinstance(date, str):\n        return False\n\n    # Check format: must be mm-dd-yyyy (with exactly two '-' separators)\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    mm, dd, yyyy = parts\n\n    # Check that all parts are digits and have correct lengths\n    if not (mm.isdigit() and dd.isdigit() and yyyy.isdigit()):\n        return False\n    if len(mm) != 2 or len(dd) != 2 or len(yyyy) != 4:\n        return False\n\n    month = int(mm)\n    day = int(dd)\n    year = int(yyyy)\n\n    # Check month range\n    if month < 1 or month > 12:\n        return False\n\n    # Days in each month (not considering leap years for February)\n    days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30,\n        5: 31, 6: 30, 7: 31, 8: 31,\n        9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    max_day = days_in_month[month]\n    if day < 1 or day > max_day:\n        return False\n\n    return True\n\n# Test cases\nif __name__ == \"__main__\":\n    print(valid_date('03-11-2000'))  # True\n    print(valid_date('15-01-2012'))  # False\n    print(valid_date('04-0-2040'))   # False\n    print(valid_date('06-04-2020'))  # True\n    print(valid_date('06/04/2020'))  # False\n    print(valid_date('02-29-2020'))  # True\n    print(valid_date('02-30-2020'))  # False\n    print(valid_date('00-10-2020'))  # False\n    print(valid_date('12-31-1999'))  # True\n    print(valid_date(''))            # False\n```"}
{"task_id": "HumanEval/125", "solution": "```python\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Check for whitespace\n    if any(c.isspace() for c in txt):\n        return txt.split()\n    # Check for comma\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count lower-case letters with odd order in the alphabet\n        count = 0\n        for c in txt:\n            if 'a' <= c <= 'z':\n                if (ord(c) - ord('a')) % 2 == 1:\n                    count += 1\n        return count\n\n# Test cases\nif __name__ == \"__main__\":\n    print(split_words(\"Hello world!\"))   # [\"Hello\", \"world!\"]\n    print(split_words(\"Hello,world!\"))   # [\"Hello\", \"world!\"]\n    print(split_words(\"abcdef\"))         # 3\n    print(split_words(\"a,c,e\"))          # [\"a\", \"c\", \"e\"]\n    print(split_words(\"abc def,ghi\"))    # [\"abc\", \"def,ghi\"]\n    print(split_words(\"xyz\"))            # 1\n    print(split_words(\"ABCDEF\"))         # 0\n```"}
{"task_id": "HumanEval/126", "solution": "```python\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    if not lst or len(lst) == 1:\n        return True\n\n    from collections import Counter\n\n    # Check for more than 2 duplicates\n    counts = Counter(lst)\n    for v in counts.values():\n        if v > 2:\n            return False\n\n    # Check for ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    return True\n\n# Test cases\nprint(is_sorted([5]))                        # True\nprint(is_sorted([1, 2, 3, 4, 5]))            # True\nprint(is_sorted([1, 3, 2, 4, 5]))            # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))         # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))      # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))      # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))         # True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))         # False\n```"}
{"task_id": "HumanEval/127", "solution": "```python\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    a1, b1 = interval1\n    a2, b2 = interval2\n\n    # Find intersection\n    start = max(a1, a2)\n    end = min(b1, b2)\n\n    if start > end:\n        return \"NO\"  # No intersection\n\n    length = end - start  # closed interval: length is end - start\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Sample test cases\nif __name__ == \"__main__\":\n    print(intersection((1, 2), (2, 3)))      # \"NO\"\n    print(intersection((-1, 1), (0, 4)))     # \"NO\"\n    print(intersection((-3, -1), (-5, 5)))   # \"YES\"\n    print(intersection((1, 3), (2, 4)))      # \"NO\"\n    print(intersection((1, 7), (3, 10)))     # \"NO\"\n    print(intersection((1, 7), (3, 5)))      # \"YES\"\n```\n**Explanation:**\n- The intersection of two closed intervals \\([a_1, b_1]\\) and \\([a_2, b_2]\\) is \\([max(a_1, a_2), min(b_1, b_2)]\\) if they overlap.\n- The length of a closed interval \\([s, e]\\) is \\(e - s\\).\n- The function checks if this length is a prime number.\n- If the intervals do not overlap, it returns \"NO\"."}
{"task_id": "HumanEval/128", "solution": "```python\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    sum_magnitudes = sum(abs(x) for x in arr)\n    prod_sign = 1\n    for x in arr:\n        s = sign(x)\n        prod_sign *= s\n        if prod_sign == 0:\n            break\n\n    return sum_magnitudes * prod_sign\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))  # -9\n    print(prod_signs([0, 1]))         # 0\n    print(prod_signs([]))             # None\n    print(prod_signs([-1, -2, -3]))   # -6\n    print(prod_signs([1, 2, 3]))      # 6\n    print(prod_signs([0, 0, 0]))      # 0\n```"}
{"task_id": "HumanEval/129", "solution": "```python\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    import heapq\n\n    n = len(grid)\n    dirs = [(-1,0),(1,0),(0,-1),(0,1)]\n\n    # For each cell, we will keep the best lex path of length l ending at (i,j)\n    # dp[i][j][l] = best lex path of length l ending at (i,j)\n    # But since k can be up to N*N, and N up to 10, this is feasible.\n\n    # Instead, we use a priority queue (min-heap) to always expand the lex smallest path so far.\n    # State: (path_so_far as tuple, i, j, steps)\n    heap = []\n    visited = dict()  # (i, j, steps) -> path_so_far\n\n    for i in range(n):\n        for j in range(n):\n            path = (grid[i][j],)\n            heapq.heappush(heap, (path, i, j, 1))\n            visited[(i, j, 1)] = path\n\n    while heap:\n        path, i, j, steps = heapq.heappop(heap)\n        if steps == k:\n            return list(path)\n        for dx, dy in dirs:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < n and 0 <= nj < n:\n                new_path = path + (grid[ni][nj],)\n                key = (ni, nj, steps+1)\n                # Only keep the lex smallest path for each (ni, nj, steps+1)\n                if key not in visited or new_path < visited[key]:\n                    visited[key] = new_path\n                    heapq.heappush(heap, (new_path, ni, nj, steps+1))\n\n# Example usage:\nif __name__ == \"__main__\":\n    grid1 = [ [1,2,3], [4,5,6], [7,8,9]]\n    k1 = 3\n    print(minPath(grid1, k1))  # Output: [1, 2, 1]\n\n    grid2 = [ [5,9,3], [4,1,6], ["}
{"task_id": "HumanEval/130", "solution": "```python\ndef tri(n):\n    \"\"\"Returns the first n+1 numbers of the custom Tribonacci sequence as described.\"\"\"\n    memo = {}\n\n    def trib(k):\n        if k in memo:\n            return memo[k]\n        if k == 1:\n            res = 3\n        elif k % 2 == 0:\n            res = 1 + k // 2\n        else:\n            # For odd k > 1, need tri(k-1), tri(k-2), tri(k+1)\n            # tri(k+1) may not be in memo yet, so compute recursively\n            res = trib(k - 1) + trib(k - 2) + trib(k + 1)\n        memo[k] = res\n        return res\n\n    # The sequence is defined for k from 0 to n\n    # But the definition only gives tri(1) as a base case.\n    # Let's assume tri(0) = 1 (as in the example tri(3) = [1, 3, 2, 8])\n    memo[0] = 1\n\n    result = []\n    for k in range(n + 1):\n        result.append(trib(k))\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(tri(3))  # Output: [1, 3, 2, 8]\n    print(tri(5))  # Output: [1, 3, 2, 8, 4, 25]\n```\n**Explanation:**\n- The function uses memoization to avoid redundant calculations.\n- The base case for `tri(0)` is inferred as `1` from the example.\n- For each `k` from `0` to `n`, it computes the value according to the rules and appends it to the result list."}
{"task_id": "HumanEval/131", "solution": "```python\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    found_odd = False\n    for d in str(n):\n        digit = int(d)\n        if digit % 2 == 1:\n            product *= digit\n            found_odd = True\n    return product if found_odd else 0\n\n# Test cases\nif __name__ == \"__main__\":\n    print(digits(1))    # 1\n    print(digits(4))    # 0\n    print(digits(235))  # 15\n    print(digits(2468)) # 0\n    print(digits(13579))# 945\n    print(digits(10203))# 3\n```\n"}
{"task_id": "HumanEval/132", "solution": "```python\ndef is_nested(string):\n    '''\n    Returns True if there exists a valid subsequence of brackets in the string\n    where at least one bracket is nested.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for char in string:\n        if char == '[':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ']':\n            if current_depth > 0:\n                current_depth -= 1\n    # Nested if max_depth >= 2 (i.e., at least one bracket inside another)\n    return max_depth >= 2\n\n# Test cases\nprint(is_nested('[[]]'))           # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]'))           # False\nprint(is_nested('[]'))             # False\nprint(is_nested('[[][]]'))         # True\nprint(is_nested('[[]][['))         # True\n```\n**Explanation:**\n- The function tracks the maximum depth of open brackets.\n- If at any point the depth is 2 or more, it means there is at least one nested bracket.\n- The function does **not** require the whole string to be a valid bracket sequence, just that a valid nested subsequence exists."}
{"task_id": "HumanEval/133", "solution": "```python\nimport math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    return sum(int(math.ceil(x))**2 for x in lst)\n\n# Test cases\nif __name__ == \"__main__\":\n    print(sum_squares([1,2,3]))        # Output: 14\n    print(sum_squares([1,4,9]))        # Output: 98\n    print(sum_squares([1,3,5,7]))      # Output: 84\n    print(sum_squares([1.4,4.2,0]))    # Output: 29\n    print(sum_squares([-2.4,1,1]))     # Output: 6\n```"}
{"task_id": "HumanEval/134", "solution": "```python\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Remove trailing spaces\n    txt = txt.rstrip()\n    if not txt:\n        return False\n    # Check if last character is a letter\n    if not txt[-1].isalpha():\n        return False\n    # Check if it's a single-letter word (preceded by space or is at start)\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))    # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))   # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))             # False\nprint(check_if_last_char_is_a_letter(\"a\"))            # True\nprint(check_if_last_char_is_a_letter(\"apple a\"))      # True\nprint(check_if_last_char_is_a_letter(\"apple ab\"))     # False\n```"}
{"task_id": "HumanEval/135", "solution": "```python\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Traverse from the end to the start to find the largest such index\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(can_arrange([1,2,4,3,5]))  # Output: 3\n    print(can_arrange([1,2,3]))      # Output: -1\n    print(can_arrange([5,4,3,2,1]))  # Output: 4\n    print(can_arrange([1]))          # Output: -1\n    print(can_arrange([1,3,2,4,5]))  # Output: 2\n```"}
{"task_id": "HumanEval/136", "solution": "```python\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negatives = [x for x in lst if isinstance(x, int) and x < 0]\n    positives = [x for x in lst if isinstance(x, int) and x > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))      # (None, 1)\n    print(largest_smallest_integers([]))                       # (None, None)\n    print(largest_smallest_integers([0]))                      # (None, None)\n    print(largest_smallest_integers([-5, -2, -10, 3, 8, 1]))   # (-2, 1)\n    print(largest_smallest_integers([-1, -2, -3]))             # (-1, None)\n    print(largest_smallest_integers([5, 10, 2]))               # (None, 2)\n```"}
{"task_id": "HumanEval/137", "solution": "```python\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def to_float(x):\n        if isinstance(x, (int, float)):\n            return float(x)\n        elif isinstance(x, str):\n            # Replace comma with dot for float conversion\n            return float(x.replace(',', '.'))\n        else:\n            raise ValueError(\"Unsupported type\")\n\n    val_a = to_float(a)\n    val_b = to_float(b)\n\n    if val_a == val_b:\n        return None\n    elif val_a > val_b:\n        return a\n    else:\n        return b\n\n# Test cases\nif __name__ == \"__main__\":\n    print(compare_one(1, 2.5))      # \u279e 2.5\n    print(compare_one(1, \"2,3\"))    # \u279e \"2,3\"\n    print(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\n    print(compare_one(\"1\", 1))      # \u279e None\n    print(compare_one(\"3.5\", 3.4))  # \u279e \"3.5\"\n    print(compare_one(7, \"6,9\"))    # \u279e 7\n    print(compare_one(\"2,0\", \"2.0\"))# \u279e None\n```"}
{"task_id": "HumanEval/138", "solution": "```python\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # The sum of 4 positive even numbers is always even and at least 2+2+2+2=8\n    # Any even n >= 8 can be written as such a sum: n = 2 + 2 + 2 + (n-6)\n    return n >= 8 and n % 2 == 0\n\n# Example usage:\n# print(is_equal_to_sum_even(4))  # False\n# print(is_equal_to_sum_even(6))  # False\n# print(is_equal_to_sum_even(8))  # True\n# print(is_equal_to_sum_even(10)) # True\n```"}
{"task_id": "HumanEval/139", "solution": "```python\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    import math\n\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer (n > 0)\")\n\n    result = 1\n    for k in range(1, n+1):\n        result *= math.factorial(k)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(special_factorial(4))  # Output: 288\n```"}
{"task_id": "HumanEval/140", "solution": "```python\nimport re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace 3 or more consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining single or double spaces with '_'\n    text = re.sub(r' {1,2}', '_', text)\n    return text\n\n# Test cases\nif __name__ == \"__main__\":\n    print(fix_spaces(\"Example\"))         # \"Example\"\n    print(fix_spaces(\"Example 1\"))      # \"Example_1\"\n    print(fix_spaces(\" Example 2\"))     # \"_Example_2\"\n    print(fix_spaces(\" Example   3\"))   # \"_Example-3\"\n    print(fix_spaces(\"A    B\"))         # \"A-B\"\n    print(fix_spaces(\"A  B   C\"))       # \"A_B-C\"\n```"}
{"task_id": "HumanEval/141", "solution": "```python\ndef file_name_check(file_name):\n    \"\"\"Check if the file name is valid according to the specified rules.\"\"\"\n    # Rule 1: No more than three digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    # Rule 2: The file name contains exactly one dot '.'\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name, ext = file_name.split('.')\n    \n    # Rule 3: The substring before the dot should not be empty,\n    # and it starts with a letter from the latin alphabet\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Rule 4: The substring after the dot should be one of ['txt', 'exe', 'dll']\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n\n# Example usage:\nprint(file_name_check(\"example.txt\"))    # => 'Yes'\nprint(file_name_check(\"1example.dll\"))   # => 'No'\nprint(file_name_check(\"examp1e2.3dll\")) # => 'No'\nprint(file_name_check(\"examp123.dll\"))  # => 'Yes'\nprint(file_name_check(\"examp1234.dll\")) # => 'No'\nprint(file_name_check(\".txt\"))          # => 'No'\nprint(file_name_check(\"exampletxt\"))    # => 'No'\nprint(file_name_check(\"example.txt.exe\")) # => 'No'\n```"}
{"task_id": "HumanEval/142", "solution": "```python\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    total = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0:\n            total += val ** 2\n        elif i % 4 == 0:\n            total += val ** 3\n        else:\n            total += val\n    return total\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(sum_squares([1,2,3]))         # Output: 6\n    print(sum_squares([]))              # Output: 0\n    print(sum_squares([-1,-5,2,-1,-5])) # Output: -126\n```\n"}
{"task_id": "HumanEval/143", "solution": "```python\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(words_in_sentence(\"This is a test\"))           # Output: \"is\"\n    print(words_in_sentence(\"lets go for swimming\"))     # Output: \"go for\"\n    print(words_in_sentence(\"a bb ccc dddd eeeee\"))      # Output: \"bb ccc eeeee\"\n```"}
{"task_id": "HumanEval/144", "solution": "```python\ndef simplify(x, n):\n    \"\"\"Returns True if x * n is a whole number, False otherwise.\"\"\"\n    def parse_frac(frac):\n        num, den = map(int, frac.split('/'))\n        return num, den\n\n    x_num, x_den = parse_frac(x)\n    n_num, n_den = parse_frac(n)\n\n    # Multiply the fractions: (a/b) * (c/d) = (a*c)/(b*d)\n    num = x_num * n_num\n    den = x_den * n_den\n\n    # Check if the result is a whole number\n    return num % den == 0\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))   # True\nprint(simplify(\"1/6\", \"2/1\"))   # False\nprint(simplify(\"7/10\", \"10/2\")) # False\nprint(simplify(\"2/3\", \"3/2\"))   # True\nprint(simplify(\"3/4\", \"4/3\"))   # True\nprint(simplify(\"5/7\", \"7/5\"))   # True\nprint(simplify(\"1/2\", \"1/2\"))   # False\n```"}
{"task_id": "HumanEval/145", "solution": "```python\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    # Attach original index to each item for stable sorting\n    return [x for _, x in sorted(\n        enumerate(nums),\n        key=lambda ix: (digit_sum(ix[1]), ix[0])\n    )]\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\n    print(order_by_points([]))                     # Output: []\n    print(order_by_points([123, 321, 213, 12]))    # Output: [12, 123, 321, 213]\n    print(order_by_points([-5, 5, 14, -14]))       # Output: [-5, 5, 14, -14]\n```"}
{"task_id": "HumanEval/146", "solution": "```python\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    def is_odd_digit(d):\n        return d in {'1', '3', '5', '7', '9'}\n    \n    count = 0\n    for n in nums:\n        if n > 10:\n            s = str(abs(n))\n            if is_odd_digit(s[0]) and is_odd_digit(s[-1]):\n                count += 1\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(specialFilter([15, -73, 14, -15]))         # Output: 1\n    print(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2\n    print(specialFilter([135, 57, 99, 24, 81]))      # Output: 3\n```"}
{"task_id": "HumanEval/147", "solution": "```python\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Compute a[i] % 3 for i in 1..n\n    cnt = [0, 0, 0]  # cnt[rem] = number of elements with a[i] % 3 == rem\n    for i in range(1, n+1):\n        val = i*i - i + 1\n        rem = val % 3\n        cnt[rem] += 1\n\n    # Now, count the number of (i, j, k) with i<j<k and (a[i]+a[j]+a[k])%3==0\n    # The possible combinations of remainders (r1, r2, r3) with r1<=r2<=r3 and (r1+r2+r3)%3==0 are:\n    # (0,0,0), (1,1,1), (2,2,2), (0,1,2)\n    from math import comb\n\n    ans = 0\n    # All same\n    for r in range(3):\n        if cnt[r] >= 3:\n            ans += comb(cnt[r], 3)\n    # All different\n    ans += cnt[0] * cnt[1] * cnt[2]\n    return ans\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(get_max_triples(5))  # Output: 1\n    print(get_max_triples(10)) # Try more cases\n```\n**Explanation:**\n\n- For each `i`, compute `a[i] % 3` and count how many times each remainder (0, 1, 2) appears.\n- The sum of three numbers is divisible by 3 if their remainders sum to a multiple of 3.\n- The valid combinations are:\n    - All three have the same remainder: (0,0,0), (1,1,1), (2,2,2)\n    - All three have different remainders: (0,1,2)\n- Use combinatorics to count the number of such triples."}
{"task_id": "HumanEval/148", "solution": "```python\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        idx1 = planets.index(planet1)\n        idx2 = planets.index(planet2)\n    except ValueError:\n        return ()\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n    # Exclude planet1 and planet2 themselves\n    between = planets[start+1:end]\n    return tuple(between)\n\n# Example usage:\n# print(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\n# print(bf(\"Earth\", \"Mercury\"))    # (\"Venus\",)\n# print(bf(\"Mercury\", \"Uranus\"))   # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n# print(bf(\"Pluto\", \"Earth\"))      # ()\n```"}
{"task_id": "HumanEval/149", "solution": "```python\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out strings with odd lengths\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    # Sort by length, then alphabetically\n    even_length_words.sort(key=lambda x: (len(x), x))\n    return even_length_words\n\n# Test cases\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorted_list_sum([\"abcd\", \"ef\", \"ghij\", \"kl\", \"mnop\", \"qr\"]) == [\"ef\", \"kl\", \"qr\", \"abcd\", \"ghij\", \"mnop\"]\nassert sorted_list_sum([\"a\", \"b\", \"c\"]) == []\nassert sorted_list_sum([]) == []\nassert sorted_list_sum([\"aa\", \"bb\", \"aa\"]) == [\"aa\", \"aa\", \"bb\"]\n```"}
{"task_id": "HumanEval/150", "solution": "```python\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n\n# Example usage:\nprint(x_or_y(7, 34, 12))   # Output: 34\nprint(x_or_y(15, 8, 5))    # Output: 5\nprint(x_or_y(2, 100, 200)) # Output: 100\nprint(x_or_y(1, 1, 0))     # Output: 0\n```"}
{"task_id": "HumanEval/151", "solution": "```python\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    '''\n    return sum(\n        x ** 2\n        for x in lst\n        if isinstance(x, int) and x >= 0 and x % 2 == 1\n    )\n\n# Test cases\nif __name__ == \"__main__\":\n    print(double_the_difference([1, 3, 2, 0]))  # 10\n    print(double_the_difference([-1, -2, 0]))   # 0\n    print(double_the_difference([9, -2]))       # 81\n    print(double_the_difference([0]))           # 0\n    print(double_the_difference([]))            # 0\n    print(double_the_difference([1.5, 3, 5, -7, 2])) # 9 + 25 = 34\n```"}
{"task_id": "HumanEval/152", "solution": "```python\ndef compare(game, guess):\n    \"\"\"\n    Determines how far off each guess was from the actual game result.\n    Returns a list where each element is 0 if the guess was correct,\n    otherwise the absolute difference between the guess and the actual score.\n    \"\"\"\n    return [0 if g == s else abs(g - s) for g, s in zip(game, guess)]\n\n# Example usage:\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))  # Output: [0,0,0,0,3,3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))  # Output: [4,4,1,0,0,6]\n```\n"}
{"task_id": "HumanEval/153", "solution": "```python\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    \"\"\"\n    def strength(ext):\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        return cap - sm\n\n    max_strength = None\n    strongest_ext = None\n\n    for ext in extensions:\n        s = strength(ext)\n        if (max_strength is None) or (s > max_strength):\n            max_strength = s\n            strongest_ext = ext\n\n    return f\"{class_name}.{strongest_ext}\"\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Slices.SErviNGSliCes\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # my_class.AA\n    print(Strongest_Extension('Test', ['a', 'B', 'C']))  # Test.B\n    print(Strongest_Extension('X', ['abc', 'DEF', 'GhI']))  # X.DEF\n```"}
{"task_id": "HumanEval/154", "solution": "```python\ndef cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if not b:\n        return True  # Empty string is always a substring\n\n    n = len(b)\n    # Generate all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(n)]\n    # Check if any rotation is a substring of a\n    return any(rot in a for rot in rotations)\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\"))      # False\nprint(cycpattern_check(\"hello\",\"ell\"))     # True\nprint(cycpattern_check(\"whassup\",\"psus\"))  # False\nprint(cycpattern_check(\"abab\",\"baa\"))      # True\nprint(cycpattern_check(\"efef\",\"eeff\"))     # False\nprint(cycpattern_check(\"himenss\",\"simen\")) # True\n```\n"}
{"task_id": "HumanEval/155", "solution": "```python\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(abs(num))  # Remove sign if negative\n    even = 0\n    odd = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n# Example usage:\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\nprint(even_odd_count(0))    # Output: (1, 0)\nprint(even_odd_count(2468)) # Output: (4, 0)\nprint(even_odd_count(1357)) # Output: (0, 4)\n```"}
{"task_id": "HumanEval/156", "solution": "```python\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4, 1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman = \"\"\n    i = 0\n    while number > 0:\n        count = number // val[i]\n        roman += syms[i] * count\n        number -= val[i] * count\n        i += 1\n    return roman.lower()\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(152) == 'clii'\n    assert int_to_mini_roman(426) == 'cdxxvi'\n    assert int_to_mini_roman(1) == 'i'\n    assert int_to_mini_roman(1000) == 'm'\n    print(\"All tests passed.\")\n```"}
{"task_id": "HumanEval/157", "solution": "```python\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # First, check if the sides can form a triangle (triangle inequality)\n    sides = sorted([a, b, c])\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n\n    # Check for right-angled triangle using Pythagoras theorem\n    return abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 1e-9\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(right_angle_triangle(3, 4, 5))  # True\n    print(right_angle_triangle(1, 2, 3))  # False\n    print(right_angle_triangle(5, 12, 13))  # True\n    print(right_angle_triangle(2, 2, 3))  # False\n```"}
{"task_id": "HumanEval/158", "solution": "```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    if not words:\n        return \"\"\n    # Create a list of tuples: (number of unique chars, word)\n    unique_counts = []\n    for word in words:\n        unique_counts.append((len(set(word)), word))\n    # Find the maximum number of unique characters\n    max_unique = max(unique_counts, key=lambda x: x[0])[0]\n    # Filter words with the maximum unique character count\n    candidates = [word for count, word in unique_counts if count == max_unique]\n    # Return the lexicographically smallest among them\n    return min(candidates)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(find_max([\"name\", \"of\", \"string\"]))      # Output: \"string\"\n    print(find_max([\"name\", \"enam\", \"game\"]))      # Output: \"enam\"\n    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))       # Output: \"aaaaaaa\"\n    print(find_max([]))                            # Output: \"\"\n```"}
{"task_id": "HumanEval/159", "solution": "```python\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \"\"\"\n    # The rabbit can eat at most the number of remaining carrots, or as many as needed\n    eaten_now = min(need, remaining)\n    total_eaten = number + eaten_now\n    carrots_left = remaining - eaten_now\n    return [total_eaten, carrots_left]\n\n# Test cases\nif __name__ == \"__main__\":\n    print(eat(5, 6, 10))  # [11, 4]\n    print(eat(4, 8, 9))   # [12, 1]\n    print(eat(1, 10, 10)) # [11, 0]\n    print(eat(2, 11, 5))  # [7, 0]\n    print(eat(0, 0, 0))   # [0, 0]\n    print(eat(0, 5, 0))   # [0, 0]\n    print(eat(0, 0, 5))   # [0, 5]\n```"}
{"task_id": "HumanEval/160", "solution": "```python\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Map operator strings to actual Python functions\n    import operator as op\n\n    ops = {\n        '+': op.add,\n        '-': op.sub,\n        '*': op.mul,\n        '//': op.floordiv,\n        '**': op.pow\n    }\n\n    # Start with the first operand\n    result = operand[0]\n    for i, oper in enumerate(operator):\n        func = ops[oper]\n        result = func(result, operand[i+1])\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))  # Output: 9\n    print(do_algebra(['**', '+', '//'], [2, 3, 4, 5]))  # Output: ((2 ** 3) + 4) // 5 = (8 + 4) // 5 = 12 // 5 = 2\n    print(do_algebra(['-', '*'], [10, 2, 3]))  # Output: (10 - 2) * 3 = 8 * 3 = 24\n```"}
{"task_id": "HumanEval/161", "solution": "```python\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"\n    # Check if there is at least one letter in s\n    has_letter = any(c.isalpha() for c in s)\n    if has_letter:\n        # Reverse case for letters, keep others as is\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # No letters: reverse the string\n        return s[::-1]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(solve(\"1234\"))   # \"4321\"\n    print(solve(\"ab\"))     # \"AB\"\n    print(solve(\"#a@C\"))   # \"#A@c\"\n```"}
{"task_id": "HumanEval/162", "solution": "```python\nimport hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n```"}
{"task_id": "HumanEval/163", "solution": "```python\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Even digits are 2, 4, 6, 8\n    even_digits = [2, 4, 6, 8]\n    low = min(a, b)\n    high = max(a, b)\n    # Find even digits in the inclusive range [low, high]\n    return [d for d in even_digits if low <= d <= high]\n\n# Test cases\nif __name__ == \"__main__\":\n    print(generate_integers(2, 8))    # [2, 4, 6, 8]\n    print(generate_integers(8, 2))    # [2, 4, 6, 8]\n    print(generate_integers(10, 14))  # []\n    print(generate_integers(1, 1))    # []\n    print(generate_integers(4, 4))    # [4]\n    print(generate_integers(0, 9))    # [2, 4, 6, 8]\n```"}
